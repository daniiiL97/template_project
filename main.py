import os
import streamlit as st
import streamlit.components.v1 as components
import boto3
from botocore.client import Config
import pandas as pd
from io import BytesIO
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer
import ast
import textwrap
import requests

PASSWORD = st.secrets["PASSWORD"]
ACCESS_KEY = st.secrets["ACCESS_KEY"]
SECRET_KEY = st.secrets["SECRET_KEY"]
HUGGINGFACE_TOKEN = st.secrets["HUGGINGFACE_TOKEN"]
API_TOKEN = HUGGINGFACE_TOKEN


def load_hf_token():
    return HUGGINGFACE_TOKEN


@st.cache_resource
def load_model():
    return SentenceTransformer("intfloat/multilingual-e5-large")


@st.cache_data
def load_data_from_s3():
    try:
        vk_cloud_endpoint = 'https://hb.bizmrg.com'
        s3 = boto3.client(
            's3',
            endpoint_url=vk_cloud_endpoint,
            aws_access_key_id=ACCESS_KEY,
            aws_secret_access_key=SECRET_KEY,
            config=Config(signature_version='s3v4')
        )
        bucket_name = 'templates97'
        object_name = "embeddings.xlsx"
        response = s3.get_object(Bucket=bucket_name, Key=object_name)
        file_content = response["Body"].read()
        df = pd.read_excel(BytesIO(file_content), engine='openpyxl')
        df['embedding'] = df['embedding'].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)
        embeddings = df['embedding'].apply(lambda x: np.array(x)).tolist()
        return df, embeddings
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        st.stop()


def find_relevant_templates(input_text, embeddings, df, top_n):
    model = load_model()
    input_embedding = model.encode(input_text)
    similarities = cosine_similarity([input_embedding], embeddings)[0]
    top_indices = similarities.argsort()[-top_n:][::-1]
    top_templates = df.iloc[top_indices]['–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¢–∏–ø–æ–ª–æ–≥–∏–∑–∞—Ç–æ—Ä–∞'].values
    top_scores = similarities[top_indices]
    return top_templates, top_scores


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
def summarize_text_sync(text, model="RussianNLP/FRED-T5-Summarizer"):
    url = f"https://api-inference.huggingface.co/models/{model}"
    headers = {"Authorization": f"Bearer {API_TOKEN}"}
    payload = {
        "inputs": text,
        "parameters": {"max_length": 50, "min_length": 25, "do_sample": False}
    }
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code == 200:
        return response.json()[0]['summary_text']
    else:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ
def transcribe_audio(audio_data):
    API_URL = "https://api-inference.huggingface.co/models/openai/whisper-large-v2"
    headers = {"Authorization": f"Bearer {API_TOKEN}"}
    response = requests.post(API_URL, headers=headers, data=audio_data)
    if response.status_code == 200:
        return response.json().get("text", "")
    else:
        st.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.status_code}")
        return ""


def main():
    st.title("–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    df, embeddings = load_data_from_s3()
    if "input_phrase" not in st.session_state:
        st.session_state["input_phrase"] = ""

    # –ê—É–¥–∏–æ –≤–≤–æ–¥ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
    audio_input = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ üéôÔ∏è", type=["wav", "mp3"])
    if audio_input:
        st.write("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ...")
        transcription = transcribe_audio(audio_input.read())
        if transcription:
            st.write("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            st.write(transcription)
            st.session_state["input_phrase"] = transcription

    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
    st.session_state["input_phrase"] = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤:",
        value=st.session_state["input_phrase"],
        key="search_phrase"
    )

    # –°–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–±–ª–æ–Ω–æ–≤
    top_n = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤:", min_value=1, max_value=11, step=1)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
    if st.button("–ù–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω—ã"):
        relevant_templates, scores = find_relevant_templates(st.session_state["input_phrase"], embeddings, df, top_n)
        st.write("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:")

        # –¶–∏–∫–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        for i, (template, score) in enumerate(zip(relevant_templates, scores)):
            wrapped_template = textwrap.fill(template, width=100)
            st.write(f"**–®–∞–±–ª–æ–Ω {i + 1}:**\n{wrapped_template}")
            st.write(f"**–°—Ö–æ–∂–µ—Å—Ç—å:** {score:.4f}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            if f"summary_{i}" not in st.session_state:
                st.session_state[f"summary_{i}"] = ""

            # –ö–Ω–æ–ø–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ session_state
            if st.button(f"–°—É–º–º–∞—Ä–∏–∑–æ–≤–∞—Ç—å –®–∞–±–ª–æ–Ω {i + 1}", key=f"sum_button_{i}"):
                summary = summarize_text_sync(template)
                if summary:
                    st.session_state[f"summary_{i}"] = summary

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if st.session_state[f"summary_{i}"]:
                st.write(f"**–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ {i + 1}:** {st.session_state[f'summary_{i}']}")

            # HTML –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            copy_button_html = f"""
                <style>
                    .copy-button {{
                        background-color: #4CAF50;
                        border: none;
                        color: white;
                        padding: 10px 20px;
                        text-align: center;
                        text-decoration: none;
                        display: inline-block;
                        font-size: 16px;
                        margin: 4px 2px;
                        cursor: pointer;
                        border-radius: 12px;
                    }}
                </style>
                <button class="copy-button" onclick="copyToClipboard('template_{i}')">–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω {i + 1}</button>
                <textarea id="template_{i}" style="display:none;">{wrapped_template}</textarea>
                <script>
                function copyToClipboard(id) {{
                    var copyText = document.getElementById(id);
                    copyText.style.display = 'block';
                    copyText.select();
                    document.execCommand('copy');
                    copyText.style.display = 'none';
                    alert('–®–∞–±–ª–æ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                }}
                </script>
            """
            components.html(copy_button_html)
            st.write("************")


# –í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if "password_entered" not in st.session_state:
    st.session_state["password_entered"] = False

if not st.session_state["password_entered"]:
    st.title("–í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    password_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        if password_input == PASSWORD:
            st.session_state["password_entered"] = True
            st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!")
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
else:
    main()
